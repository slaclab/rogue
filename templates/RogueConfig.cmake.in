# ----------------------------------------------------------------------------
# Title      : Rogue Cmake Export Template
# ----------------------------------------------------------------------------
# File       : RogueConfig.cmake.in
# ----------------------------------------------------------------------------
# Description:
# Rogue export file to be overridden by Cmake.
# ----------------------------------------------------------------------------
# This file is part of the rogue software package. It is subject to
# the license terms in the LICENSE.txt file found in the top-level directory
# of this distribution and at:
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
# No part of the rogue software package, including this file, may be
# copied, modified, propagated, or distributed except according to the terms
# contained in the LICENSE.txt file.
# ----------------------------------------------------------------------------

# Rogue cmake configuration file. Used when compiling against the rogue library.

#####################################
# Enables from Rogue CMAKE
#####################################
set(NO_PYTHON   @NO_PYTHON@)

#####################################
# Boost + Python
#####################################
if ( NOT NO_PYTHON )

   # Find newest python interpreter first
   set(Python3_FIND_STRATEGY "LOCATION")
   find_package(Python3 QUIET REQUIRED COMPONENTS Interpreter Development)

   # Find Numpy
   execute_process(
      COMMAND python3 -c "import numpy; print(numpy.get_include(), end='')"
      RESULT_VARIABLE Python3_NumPy_RESULT
      OUTPUT_VARIABLE Python3_NumPy_INCLUDE_DIRS
      ERROR_QUIET
      OUTPUT_STRIP_TRAILING_WHITESPACE)

   if (Python3_NumPy_RESULT)
      message("")
      message(FATAL_ERROR "Failed to find numpy includes!")
   endif()

   set(Boost_USE_MULTITHREADED ON)
   set(Boost_NO_BOOST_CMAKE ON)

   # Hint for boost on anaconda
   if (DEFINED ENV{CONDA_PREFIX})
      set(BOOST_ROOT $ENV{CONDA_PREFIX})
   endif()

   # libboost_python3.7 style libraries
   message("Looking for libboost_python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}")
   FIND_PACKAGE(Boost 1.58 QUIET COMPONENTS python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR})

   # libboost_python3 style libraries
   if (NOT Boost_FOUND)
      message("Looking for libboost_python${Python3_VERSION_MAJOR}")
      FIND_PACKAGE(Boost 1.58 QUIET COMPONENTS python${Python3_VERSION_MAJOR})
   endif()

   # libboost_python style libraries
   if (NOT Boost_FOUND)
      message("Looking for libboost_python")
      FIND_PACKAGE(Boost 1.58 QUIET COMPONENTS system thread python)
   endif()

   # libboost_python-py37 style libraries
   if (NOT Boost_FOUND)
      message("Looking for libboost_python-py${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}")
      FIND_PACKAGE(Boost 1.58 QUIET COMPONENTS python-py${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR})
   endif()

   # libboost_python3-py37 style libraries
   if (NOT Boost_FOUND)
      message("Looking for libboost_python3-py${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}")
      FIND_PACKAGE(Boost 1.58 QUIET COMPONENTS python3-py${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR})
   endif()

   # Nothing worked
   if (NOT Boost_FOUND)
      message("")
      message(FATAL_ERROR "Failed to find boost libraries!")
   endif()

else()
   add_definitions( -DNO_PYTHON )
endif()

#####################################
# BZIP2
#####################################
find_package(BZip2 QUIET REQUIRED)

#####################################
# ZeroMQ
#####################################
# First try with cmake packages
find_package(ZeroMQ QUIET)

# ZeroMQ does not always support cmake, use brute force
if (NOT ZeroMQ_FOUND)

   # Convert LD_LIBRARY PATH for search
   if(DEFINED ENV{LD_LIBRARY_PATH})
      string(REPLACE ":" ";" HINT_PATHS $ENV{LD_LIBRARY_PATH})
   else()
      set(HINT_PATHS, "")
   endif()

   # See if zmq library is in LD_LIBRARY_PATH
   find_library(ZeroMQ_LIBRARY
                NAMES zmq
                PATHS ${HINT_PATHS})

   # Found it
   if (ZeroMQ_LIBRARY)

      # Get the base directory
      get_filename_component(ZMQ_LIBDIR ${ZeroMQ_LIBRARY} DIRECTORY)

      # See if we can find the header in a relative path
      find_path(ZeroMQ_INCLUDE_DIR
              NAMES zmq.h
              PATHS ${ZMQ_LIBDIR}/../include
              )
      if (NOT ZeroMQ_INCLUDE_DIR)
         message("")
         message(FATAL_ERROR "Failed to find ZeroMQ_INCLUDE_DIR!")
      endif()
   else()
      # Failed to find it
      message("")
      message(FATAL_ERROR "Failed to find zeroMQ!")
   endif()
endif()

#####################################
# Set Rogue Variables
#####################################
# These variables are now defined
# ${Boost_INCLUDE_DIRS}
# ${Boost_LIBRARIES}
# ${Python3_INCLUDE_DIRS}
# ${Python3_LIBRARIES}
# ${ZeroMQ_INCLUDE_DIR}
# ${ZeroMQ_LIBRARY}
# ${BZIP2_INCLUDE_DIR}
# ${BZIP2_LIBRARIES}
# ${EPICS_INCLUDES})
# ${EPICS_LIBRARIES})

# Rogue Include paths
set(ROGUE_INCLUDE_ONLY @CONF_INCLUDE_DIRS@)

# Rogue libraries
set(ROGUE_LIBRARIES_ONLY @CONF_LIBRARIES@)

# Rogue Include paths
set(ROGUE_INCLUDE_DIRS @CONF_INCLUDE_DIRS@
                       ${Boost_INCLUDE_DIRS}
                       ${Python3_INCLUDE_DIRS}
                       ${Python3_NumPy_INCLUDE_DIRS}
                       ${ZeroMQ_INCLUDE_DIR}
                       ${BZIP2_INCLUDE_DIR}
                       ${EPICS_INCLUDES})

# Rogue libraries
set(ROGUE_LIBRARIES @CONF_LIBRARIES@
                    ${Boost_LIBRARIES}
                    ${Python3_LIBRARIES}
                    ${ZeroMQ_LIBRARY}
                    ${BZIP2_LIBRARIES}
                    ${EPICS_LIBRARIES})

# Set Version
set(ROGUE_VERSION @ROGUE_VERSION@)

# Set Install Directory
set(ROGUE_DIR @ROGUE_DIR@)

#####################################
# Print status
#####################################

message("")
message("----------------------------------------------------------------------")
message("-- Rogue Version: ${ROGUE_VERSION}")
message("")
message("-- Rogue Directory: ${ROGUE_DIR}")
message("")

if (NO_PYTHON)
   message("-- Compiling without boost & python!")
else()
   message("-- Found boost: ${Boost_INCLUDE_DIRS}")
   message("-- Found boost: ${Boost_LIBRARIES}")
   message("")
   message("-- Found python: ${Python3_LIBRARIES}")
   message("-- Found numpy: ${Python3_NumPy_INCLUDE_DIRS}")
endif()

message("")
message("-- Found ZeroMq: ${ZeroMQ_INCLUDE_DIR}")
message("")
message("-- Found Bzip2: ${BZIP2_INCLUDE_DIR}")
message("----------------------------------------------------------------------")
message("")

