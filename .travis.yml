dist: focal
sudo: required

branches:
  except:
    - gh-pages

addons:
  apt:
    packages:
      - doxygen
      - doxygen-doc
      - python3-dev
      - python3-pip
      - libzmq3-dev
      - libboost-all-dev

services:
  - docker

language:
  - python

python:
  - 3.8

stages:
  - test
  - name: gen_release
    if: tag IS present
  - name: deploy_doc
    if: tag IS present
  - name: deploy_dev
    if: branch = pre-release AND tag IS blank AND NOT (type = pull_request)
  - name: deploy_tag
    if: tag IS present

env:
  global:
    - MAKEFLAGS="-j 2"
    - PACKAGE_DIR=$HOME/packages
    - EPICS_DIR=$PACKAGE_DIR/epics/base-7.0.3
    - EPICS_PCAS_DIR=$PACKAGE_DIR/pcas/pcas-4.13.2
    - LD_LIBRARY_PATH=/usr/lib:$EPICS_DIR/lib/linux-x86_64:$EPICS_PCAS_DIR/lib/linux-x86_64
    - MINICONDA_DIR=$PACKAGE_DIR/miniconda
    - DOCKER_ORG_NAME=tidair
    - GITHUB_REPO=slaclab/rogue

jobs:
  include:
    # Test stage
    - stage: test
      name: "Unit Tests"
      before_install:
        # Prepare environment
        - export EPICS_BASE=$EPICS_DIR
        - export EPICS_CA_ADDR_LIST=127.0.0.1
        - export EPICS_PCAS_ROOT=$EPICS_PCAS_DIR
        # Prepare folders
        - mkdir -p $EPICS_DIR
        - mkdir -p $EPICS_PCAS_DIR
        # Bring all the tags
        - git pull --unshallow
        - git pull

      install:
        # Tools
        - pip3 install -r pip_requirements.txt

        # EPICS base
        - cd $EPICS_DIR
        - wget -O base-7.0.3.tar.gz  https://github.com/epics-base/epics-base/archive/R7.0.3.tar.gz
        - tar xzf base-7.0.3.tar.gz --strip 1
        - make clean && make && make install

        # EPICS pcas
        - cd $EPICS_PCAS_DIR
        - wget -O pcas-4.13.2.tar.gz https://github.com/epics-modules/pcas/archive/v4.13.2.tar.gz
        - tar xzf pcas-4.13.2.tar.gz --strip 1
        - echo "EPICS_BASE=$EPICS_BASE" >> configure/RELEASE.local
        - make clean && make && make install

        # Rogue
        - cd $TRAVIS_BUILD_DIR
        - mkdir build; cd build
        - cmake .. -DROGUE_INSTALL=local
        - make -j4 install

        # Build Docs
        - if [ "$TRAVIS_BRANCH" = "documentation" ]; then
            cd $TRAVIS_BUILD_DIR;
            source setup_rogue.sh;
            cd docs;
            make html;
          fi

      before_script:
        # Prepare rogue enviroment
        - cd $TRAVIS_BUILD_DIR
        - source setup_rogue.sh

      script:
        # Run tests with coverage
        - cd $TRAVIS_BUILD_DIR
        - python3 -m pytest --cov
        - python3 -m compileall -f python/
        - flake8 --count python/

      after_success:
        # Upload coverage report
        - codecov
        - coverage report -m
        # Publish docs.
        - if [ "$TRAVIS_BRANCH" = "documentation" ]; then
           doctr deploy . --built-docs docs/build/html --deploy-branch-name gh-pages --branch-whitelist documentation;
         fi

    - stage: gen_release
      name: "Generate Release"
      install:
         - pip install -r pip_requirements.txt
      script:
         - python scripts/releaseGen.py

    # Deploy development version stage (deploy_dev)
    - &deploy-docker-stage      # Docker
     stage: deploy_dev
     name: "Deploy Docker"
     env: DOCKER_REPO=rogue-dev
     before_install:
       # Prepare enviroment
       - export DOCKER_TAG=`git describe --tags`
       - export DOCKER_IMAGE_NAME=$DOCKER_ORG_NAME/$DOCKER_REPO
       # Bring all the tags
       - git pull --unshallow
       - git pull

     before_script:
       # Login to docker
       - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin;

     script:
       # Build docker image
       - travis_wait docker build -q --build-arg branch=$TRAVIS_BRANCH -t $DOCKER_IMAGE_NAME .;

     after_success:
       # Upload docker image (as tagged and latest version)
       - docker push $DOCKER_IMAGE_NAME;
       - docker tag $DOCKER_IMAGE_NAME $DOCKER_IMAGE_NAME:$DOCKER_TAG;
       - docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG;

    - &deploy-conda-stage       # Conda for linux
      stage: deploy_dev
      name: "Deploy Conda"
      env: CONDA_TOKEN=$CONDA_UPLOAD_TOKEN_DEV
      before_install:
        # Prepare folders
        - mkdir -p $MINICONDA_DIR
        # Bring all the tags
        - git pull --unshallow
        - git pull
        # on OSX rogue needs an older version of the MacOS SDK
        - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
            git clone https://github.com/phracker/MacOSX-SDKs;
            sudo mv MacOSX-SDKs/MacOSX10.9.sdk /opt/;
            export CONDA_BUILD_SYSROOT=/opt/MacOSX10.9.sdk;
            export CONDA_BUILD=1;
          fi

      install:
        # Install Anaconda for the right architecture (linux or osx)
        - cd $MINICONDA_DIR
        - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
            wget -O miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh;
          else
            wget -O miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh;
          fi
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes
        - conda install conda-build anaconda-client conda-verify
        - conda update -q conda conda-build

      before_script:
        # Go back to top directory
        - cd $TRAVIS_BUILD_DIR

      script:
        # Build conda package
        - travis_wait 120 conda build --debug conda-recipe --output-folder bld-dir -c tidair-packages -c conda-forge

      after_success:
        # Upload conda package
        - anaconda -t $CONDA_TOKEN upload bld-dir/`echo $TRAVIS_OS_NAME`-64/*.tar.bz2

    #- <<: *deploy-conda-stage   # Conda for MacOS
      #os: osx
      #language: ruby  # osx does not support language=python

    # Deploy tagged version stage (deploy_tag)
    - <<: *deploy-docker-stage  # Docker
      stage: deploy_tag
      env: DOCKER_REPO=rogue

    - <<: *deploy-conda-stage   # Conda for Linux
      stage: deploy_tag
      env: CONDA_TOKEN=$CONDA_UPLOAD_TOKEN_TAG

    # - <<: *deploy-conda-stage   # Conda for macOS
      #stage: deploy_tag
      #os: osx
      #language: ruby  # osx does not support language=python
      #env: CONDA_TOKEN=$CONDA_UPLOAD_TOKEN_TAG
