# ----------------------------------------------------------------------------
# Title      : ROGUE GitHub Actions Script
# ----------------------------------------------------------------------------
# This file is part of the rogue software package. It is subject to
# the license terms in the LICENSE.txt file found in the top-level directory
# of this distribution and at:
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
# No part of the rogue software package, including this file, may be
# copied, modified, propagated, or distributed except according to the terms
# contained in the LICENSE.txt file.
# ----------------------------------------------------------------------------
# The following environment variables are required for this process:
# secrets.GH_TOKEN
# secrets.CONDA_UPLOAD_TOKEN_DEV
# secrets.CONDA_UPLOAD_TOKEN_TAG
# secrets.DOCKERHUB_TOKEN

name: Rogue Integration
on: [push]

jobs:
  full_build_test:
    name: Full Build Test
    runs-on: ubuntu-latest
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install doxygen doxygen-doc libzmq3-dev libboost-all-dev
          python -m pip install --upgrade pip
          pip install setuptools
          pip install -r pip_requirements.txt

      # Rogue
      - name: Build Rogue
        run: |
          python -c "import numpy; print(numpy.get_include())"
          mkdir build; cd build
          cmake .. -DROGUE_INSTALL=local
          make -j4 install

      # Run Tests
      - name: Rogue Tests
        run: |
          source setup_rogue.sh
          python -m pytest --cov

      # Flake 8 check
      - name: Flake8 Tests
        run: |
          source setup_rogue.sh
          python -m compileall -f ./python/
          flake8 --count ./python/

      # Code Coverage
      - name: Code Coverage
        run: |
          source setup_rogue.sh
          codecov
          coverage report -m

      # Generate Documentation
      - name: Generate Documentation
        if: github.ref == 'refs/heads/documentation'
        run: |
          source setup_rogue.sh
          cd docs
          make html

      - name: Deploy Documentation
        if: github.ref == 'refs/heads/documentation'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: docs/build/html

  small_build_test:
    name: Small Build Test
    runs-on: ubuntu-latest
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libzmq3-dev

      # Rogue
      - name: Build Rogue
        run: |
          mkdir build; cd build
          cmake .. -DROGUE_INSTALL=local -DNO_PYTHON=1 -DSTATIC_LIB=1
          make -j4 install

  gen_release:
    name: Generate Release
    runs-on: ubuntu-latest
    needs: [full_build_test, small_build_test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get Image Information
        id: get_image_info
        run: |
          echo ::set-output name=tag::`git describe --tags`

      - name: Get Ruckus
        run: |
          git clone https://github.com/slaclab/ruckus.git
          python -m pip install --upgrade pip
          pip install -r ruckus/scripts/pip_requirements.txt

      - name: Gen Release
        env:
          TRAVIS_REPO_SLUG: ${{ github.repository }}
          TRAVIS_TAG: ${{ steps.get_image_info.outputs.tag }}
          GH_REPO_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          python ruckus/scripts/releaseGen.py

  conda_build:
    name: Anaconda Build
    needs: [full_build_test, small_build_test]
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/pre-release'
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-10.15
    runs-on: ${{ matrix.os }}
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Setup anaconda
        env:
          OS_NAME: ${{ matrix.os }}
        run: |
          cd ${HOME}
          if [ $OS_NAME == "macos-10.15" ]
          then
            wget -O miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
          else
            wget -O miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
          fi
          bash miniconda.sh -b -p ${HOME}/miniconda
          export PATH="${HOME}/miniconda/bin:$PATH"
          source ${HOME}/miniconda/etc/profile.d/conda.sh
          conda config --set always_yes yes
          conda install conda-build anaconda-client conda-verify
          if [ $OS_NAME == "macos-10.15" ]
          then
            conda install libiconv libarchive -c conda-forge
          fi
          conda update -q conda conda-build
          conda update --all

      - name: Setup MacOS
        if: matrix.os == 'macos-10.15'
        run: |
          cd ${HOME}
          wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.15.sdk.tar.xz
          tar xzf MacOSX10.15.sdk.tar.xz
          sudo mkdir -p /opt/
          sudo mv MacOSX10.15.sdk /opt/
          CONDA_BUILD_SYSROOT=/opt/MacOSX10.15.sdk
          CONDA_BUILD=1
          echo "CONDA_BUILD_SYSROOT=$CONDA_BUILD_SYSROOT" >> $GITHUB_ENV
          echo "CONDA_BUILD=$CONDA_BUILD" >> $GITHUB_ENV

      - name: Get Image Information
        id: get_image_info
        env:
          CONDA_UPLOAD_TOKEN_DEV: ${{ secrets.CONDA_UPLOAD_TOKEN_DEV }}
          CONDA_UPLOAD_TOKEN_TAG: ${{ secrets.CONDA_UPLOAD_TOKEN_TAG }}
          OS_NAME: ${{ matrix.os }}
        run: |
          if [ ${GITHUB_REF} == "refs/heads/pre-release" ]
          then
              echo ::set-output name=token::$CONDA_UPLOAD_TOKEN_DEV
          else
              echo ::set-output name=token::$CONDA_UPLOAD_TOKEN_TAG
          fi
          if [ ${OS_NAME} == "macos-10.15" ]
          then
              echo ::set-output name=os::osx-64
          else
              echo ::set-output name=os::linux-64
          fi

      - name: Build And Upload
        run: |
          export PATH="${HOME}/miniconda/bin:$PATH"
          source ${HOME}/miniconda/etc/profile.d/conda.sh
          conda build conda-recipe --debug --output-folder bld-dir -c tidair-packages -c conda-forge
          anaconda -t ${{ steps.get_image_info.outputs.token }} upload --force bld-dir/${{ steps.get_image_info.outputs.os }}/*.tar.bz2

  docker_build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [full_build_test, small_build_test]
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/pre-release'
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Image Information
        id: get_image_info
        run: |
          echo ::set-output name=tag::`git describe --tags`
          echo ::set-output name=branch::`echo ${GITHUB_REF} | awk 'BEGIN { FS = "/" } ; { print $3 }'`
          if [ ${GITHUB_REF} == "refs/heads/pre-release" ]
          then
              echo ::set-output name=name::"rogue-dev"
          else
              echo ::set-output name=name::"rogue"
          fi

      # Setup docker build environment
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Login to Dockerhub
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: tidair
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push the docker image
      - name: Build and push image to Dockerhub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: tidair/${{ steps.get_image_info.outputs.name }}:${{ steps.get_image_info.outputs.tag }}
          build-args: branch=${{ steps.get_image_info.outputs.branch }}

